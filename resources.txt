
http://wiki.ros.org/pcl

https://www.researchgate.net/publication/331935965_Obstacle_detection_and_tracking_method_for_autonomous_vehicle_based_on_three-dimensional_LiDAR

And this one gives a good view about the fusion benefits: 
https://arxiv.org/pdf/1807.11264.pdf

Summary:

https://towardsdatascience.com/extended-kalman-filter-43e52b16757d

https://medium.com/@tempflip/udacity-self-driving-cars-extended-kalman-filters-my-bits-99cbbaf65e3d
https://medium.com/@fernandojaruchenunes/udacity-robotics-nd-project-6-where-am-i-8cd657063585

https://medium.com/@tempflip/udacity-self-driving-cars-extended-kalman-filters-my-bits-99cbbaf65e3d

https://medium.com/intro-to-artificial-intelligence/extended-kalman-filter-simplified-udacitys-self-driving-car-nanodegree-46d952fce7a3

https://medium.com/intro-to-artificial-intelligence/extended-kalman-filter-simplified-udacitys-self-driving-car-nanodegree-46d952fce7a3

https://towardsdatascience.com/extended-kalman-filter-43e52b16757d

https://medium.com/@tempflip/udacity-self-driving-cars-extended-kalman-filters-my-bits-99cbbaf65e3d

https://medium.com/@fernandojaruchenunes/udacity-robotics-nd-project-6-where-am-i-8cd657063585


cd CarND-Extended-Kalman-Filter-Project

cd build

cmake .. && make

./

======================
VIP
Nice work in applying what you've learned, building an Extended Kalman Filter in C++, and testing it against the sample data!

Kalman filter is an efficient estimation/tracking tool that allows us to integrate controls and measurements in continuous space and find continuous state estimates.

Just in case you haven't read it yet, this blog does a very good job of explaining the math behind kalman filter, particularly concerning the derivation of Kalman gain K.

In real life project, I tend to leverage open source kalman fitler framework to perform sensor fusion tasks. This approach allows me to quickly build up fusion system and spend more time in fine tuning the fusion algorithm targeting specific sensors/hardware, 
it also gives me the opportunity to learn from others and gain deeper understanding into kalman fitler. 
Fox example, ROS provides an excellent generalized extended kalman fitler library that allows 
us to perform robot location tracking. It uses Constant Turn Rate and Acceleration motion model to perform prediction, and measurements from various sensor like IMU, GPS, Wheel Odometry to perform update step. 
If you are interested, here is the paper(http://docs.ros.org/melodic/api/robot_localization/html/_downloads/robot_localization_ias13_revised.pdf)
 on the ekf framework, and here is the code implementation(https://github.com/cra-ros-pkg/robot_localization/blob/melodic-devel/src/ekf.cpp)


http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/


http://docs.ros.org/melodic/api/robot_localization/html/_downloads/robot_localization_ias13_revised.pdf


https://github.com/cra-ros-pkg/robot_localization/blob/melodic-devel/src/ekf.cpp

















